// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id            String     @id @default(uuid())
  email         String     @unique
  password      String
  role          Role       @default(CUSTOMER)
  status        UserStatus @default(PENDING)
  twoFactorEnabled Boolean  @default(true)
  twoFactorSecret String?
  profile       Profile?
  seller        Seller?
  orders        Order[]
  cartItems     Cart[]
  wishlistItems Wishlist[]
  userRoles     UserRole[]
  authChallenges  AuthChallenge[] 
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

enum Role {
  ADMIN
  SELLER
  CUSTOMER
}

enum UserStatus {
  PENDING
  ACTIVE
  INACTIVE
  BLOCKED
}

model Profile {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  firstName String
  lastName  String
  phone     String?
  address   String?
  pincode   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserRole {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  roleId    String
  role      RoleModel @relation(fields: [roleId], references: [id])
  assignedBy String?
  createdAt DateTime @default(now())

  @@unique([userId, roleId])  
}


model RoleModel {
  id          String     @id @default(uuid())
  name        String     @unique
  description String?
  permissions String?
  userRoles   UserRole[]
  createdAt   DateTime   @default(now())
}

model Category {
  id          String     @id @default(uuid())
  name        String
  description String?
  parentId    String?
  parent      Category?  @relation("CategoryRelation", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryRelation")
  products    Product[]
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Product {
  id            String          @id @default(uuid())
  name          String
  description   String?
  categoryId    String
  category      Category        @relation(fields: [categoryId], references: [id])
  brand         String?
  isActive      Boolean         @default(true)
  adminApproved Boolean         @default(false)
  productSellers ProductSeller[]
  wishlistItems  Wishlist[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model Seller {
  id              String            @id @default(uuid())
  userId          String            @unique
  user            User              @relation(fields: [userId], references: [id])
  businessName    String
  gstNumber       String?
  panNumber       String?
  businessAddress String?
  status          SellerStatus      @default(PENDING)
  rejectionReason String?
  approvedBy      String?
  approvedAt      DateTime?
  documents       SellerDocument[]
  productSellers  ProductSeller[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

enum SellerStatus {
  PENDING
  APPROVED
  REJECTED
}

model SellerDocument {
  id        String   @id @default(uuid())
  sellerId  String
  seller    Seller   @relation(fields: [sellerId], references: [id])
  fileName  String
  filePath  String
  fileSize  Int
  mimeType  String
  uploadedAt DateTime @default(now())
}

model ProductSeller {
  id            String   @id @default(uuid())
  productId     String
  product       Product  @relation(fields: [productId], references: [id])
  sellerId      String
  seller        Seller   @relation(fields: [sellerId], references: [id])
  price         Float
  stockQuantity Int
  isActive      Boolean  @default(true)
  cartItems     Cart[]
  orderItems    OrderItem[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Cart {
  id              String        @id @default(uuid())
  userId          String
  user            User          @relation(fields: [userId], references: [id])
  productSellerId String
  productSeller   ProductSeller @relation(fields: [productSellerId], references: [id])
  quantity        Int
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@unique([userId, productSellerId]) 
}

model Wishlist {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, productId]) 
}


model Order {
  id              String       @id @default(uuid())
  userId          String
  user            User         @relation(fields: [userId], references: [id])
  orderNumber     String       @unique
  totalAmount     Float
  shippingAddress String
  pincode         String
  status          OrderStatus  @default(PENDING)
  paymentStatus   PaymentStatus @default(PENDING)
  paymentIntentId String?
  orderItems      OrderItem[]
  statusHistory   OrderStatusHistory[]
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

model OrderItem {
  id              String        @id @default(uuid())
  orderId         String
  order           Order         @relation(fields: [orderId], references: [id])
  productSellerId String
  productSeller   ProductSeller @relation(fields: [productSellerId], references: [id])
  quantity        Int
  price           Float
  total           Float
}

model OrderStatusHistory {
  id        String   @id @default(uuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  status    String
  remarks   String?
  updatedBy String?
  createdAt DateTime @default(now())
}

model AuthChallenge {
  id              String   @id @default(uuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  passwordPassed  Boolean  @default(false)
  otpVerified     Boolean  @default(false)
  otpToken        String?  // Store the generated OTP
  expiresAt       DateTime
  createdAt       DateTime @default(now())
}